generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  userName       String?
  email          String?          @unique
  address        String?
  password       String?
  phone          String?          @unique
  customerId     String?
  accountId      String?
  accountLink    String?
  fcmToken       String?
  ID             String?
  certificate    String?
  profileImage   String?
  bio            String?
  dateOfBirth    String?
  gender         Gender?
  locationLat    Float?
  locationLong   Float?
  website        String?
  facebook       String?
  instagram      String?
  twitter        String?
  youtube        String?
  tikTok         String?
  isNotification NotificationType @default(ON)
  isVerified     Boolean          @default(false)
  isShared       Boolean          @default(false)
  role           UserRoleEnum     @default(USER)
  status         UserStatus       @default(ACTIVATE)
  profileStatus  ProfileStatus    @default(NEW)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relationships
  Post           Post[]
  Like           Like[]
  Comment        Comment[]
  Share          Share[]
  Report         Report[]
  SavedPost      SavedPost[]
  messages       Message[]      @relation("UserMessages")
  conversations  Conversation[] @relation("User1Conversations")
  conversations2 Conversation[] @relation("User2Conversations")
  following      Follower[]     @relation("UserFollowers")
  followers      Follower[]     @relation("FollowerList")
  Service        Service[]
  users          Favorite[]     @relation("UserFavorites")
  artist         Favorite[]     @relation("ArtistFavorites")
  user           Review[]       @relation("UserReviews")

  @@map("users")
}

model Otp {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  phone     String?   @unique
  otp       String?
  expiry    DateTime?
  token     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("otps")
}


model Post {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  title        String?
  image        String?
  address      String?
  locationLat  Float?
  locationLong Float?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  Like      Like[]
  Comment   Comment[]
  Share     Share[]
  Report    Report[]
  SavedPost SavedPost[]

  @@map("posts")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("likes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("comments")
}

model Share {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("shares")
}

model Report {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  postId      String?  @db.ObjectId
  serviceId   String?  @db.ObjectId
  reason      String?
  reportImage String?
  reportVideo String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])

  @@map("reports")
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("savedPosts")
}

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String   @db.ObjectId
  user2Id   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  messages Message[] @relation("ConversationMessages")
  user1    User      @relation("User1Conversations", fields: [user1Id], references: [id])
  user2    User      @relation("User2Conversations", fields: [user2Id], references: [id])

  @@map("conversations")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  receiverId     String   @db.ObjectId
  content        String?
  file           String?
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  sender       User         @relation("UserMessages", fields: [senderId], references: [id])
  conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])

  @@map("messages")
}

model generateFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  file      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("generateFiles")
}

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("FollowerList", fields: [followingId], references: [id])

  @@map("followers")
}

model Service {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String?
  price        Float?
  serviceImage Json[]
  date         String
  time         Json[]
  location     String
  about        String
  locationLat  Float?
  locationLong Float?
  isDeleted    Boolean  @default(false)
  userId       String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  report       Report[]

  // relation
  user    User     @relation(fields: [userId], references: [id])
  review  Review[] @relation("ServiceReviews")

  @@map("services")
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  artistId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User @relation("UserFavorites", fields: [userId], references: [id])
  artist User @relation("ArtistFavorites", fields: [artistId], references: [id])

  @@map("favorites")
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  serviceId  String   @db.ObjectId
  rating     Float?
  reviewFile String?
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  user    User    @relation("UserReviews", fields: [userId], references: [id])
  service Service @relation("ServiceReviews", fields: [serviceId], references: [id])

  @@map("reviews")
}



enum UserRoleEnum {
  USER
  SELLER
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  ACTIVATE
  INACTIVATE
  BLOCKED
}

enum ProfileStatus {
  CERTIFITE
  POPULAR
  NEW
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum NotificationType {
  ON
  OFF
}
